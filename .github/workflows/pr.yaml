on: pull_request
name: Review
jobs:
    changelog:
        runs-on: ubuntu-latest
        name: Changelog should be updated
        strategy:
            fail-fast: false
        steps:
            - name: Checkout
              uses: actions/checkout@v2
              with:
                  fetch-depth: 2

            - name: Git fetch
              run: git fetch

            - name: Check that changelog has been updated.
              run: git diff --exit-code origin/${{ github.base_ref }} -- CHANGELOG.md && exit 1 || exit 0

    test-composer-files:
        name: Validate composer (PHP ${{ matrix.php }})
        runs-on: ubuntu-20.04
        strategy:
            fail-fast: false
            matrix:
                php: ['8.1']
        steps:
            - uses: actions/checkout@master
            - name: Setup PHP, with composer and extensions
              uses: shivammathur/setup-php@master
              with:
                  php-version: ${{ matrix.php }}
                  extension-csv: ctype, dom, iconv, json
                  coverage: none
            - name: Get composer cache directory
              id: composer-cache
              run: echo "::set-output name=dir::$(composer config cache-files-dir)"
            - uses: actions/cache@v1
              with:
                  path: ${{ steps.composer-cache.outputs.dir }}
                  key: ${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
                  restore-keys: ${{ matrix.php }}-composer-
            - name: Validate composer files
              run: composer validate composer.json

    phpcsfixer:
        name: PHP-CS-FIXER (PHP ${{ matrix.php }})
        runs-on: ubuntu-20.04
        strategy:
            fail-fast: false
            matrix:
                php: ['8.1']
        steps:
            - uses: actions/checkout@master
            - name: Setup PHP, with composer and extensions
              uses: shivammathur/setup-php@master
              with:
                  php-version: ${{ matrix.php }}
                  extension-csv: ctype, dom, iconv, json
                  coverage: none
            -   name: Get composer cache directory
                id: composer-cache
                run: echo "::set-output name=dir::$(composer config cache-files-dir)"
            -   uses: actions/cache@v1
                with:
                    path: ${{ steps.composer-cache.outputs.dir }}
                    key: ${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
                    restore-keys: ${{ matrix.php }}-composer-
            - name: Install Dependencies
              run: composer install -q --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist
            - name: phpcsfixer
              run: composer actions/phpcsfixer

    twigcs:
        name: TwigCS (PHP ${{ matrix.php }})
        runs-on: ubuntu-20.04
        strategy:
            fail-fast: false
            matrix:
                php: ['8.1']
        steps:
            - uses: actions/checkout@master
            - name: Setup PHP, with composer and extensions
              uses: shivammathur/setup-php@master
              with:
                  php-version: ${{ matrix.php }}
                  extension-csv: ctype, dom, iconv, json
                  coverage: none
            -   name: Get composer cache directory
                id: composer-cache
                run: echo "::set-output name=dir::$(composer config cache-files-dir)"
            -   uses: actions/cache@v1
                with:
                    path: ${{ steps.composer-cache.outputs.dir }}
                    key: ${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
                    restore-keys: ${{ matrix.php }}-composer-
            - name: Install Dependencies
              run: composer install -q --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist
            - name: twigcs
              run: composer actions/twigcs

    js-coding-standards:
        name: JS coding standards
        runs-on: ubuntu-20.04
        steps:
            - uses: actions/checkout@master
            - uses: actions/setup-node@v1
              with:
                  node-version: '18.x'
            - name: install
              run: yarn install
            - name: JS coding standards
              run: yarn coding-standards-check

    test-yarn-build:
        name: Test yarn build assets
        runs-on: ubuntu-20.04
        steps:
            - uses: actions/checkout@master

            - name: Get yarn cache directory
              id: yarn-cache
              run: echo "::set-output name=dir::$(yarn cache dir)"
            - uses: actions/cache@v1
              with:
                  path: ${{ steps.yarn-cache.outputs.dir }}
                  key: yarn-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: yarn-

            - name: Install yarn packages
              run: docker run -v $PWD:/app:rw -v ${{ steps.yarn-cache.outputs.dir }}:/usr/local/share/.cache/yarn/v6:rw --workdir /app node:18 yarn install

            - name: Build assets
              run: docker run -v $PWD:/app:rw -v ${{ steps.yarn-cache.outputs.dir }}:/usr/local/share/.cache/yarn/v6:rw --workdir /app node:18 yarn build
